
module Genfrag
class App

class Command

  attr_accessor :options  # a Hash used by optparse
  attr_accessor :ops      # an OpenStruct of the options

  def initialize( out = STDOUT, err = STDERR )
    @out = out
    @err = err
    @options = {
    #  :skeleton_dir => File.join(mrbones_dir, 'data'),
    #  :with_tasks => false,
    #  :verbose => false,
    #  :name => nil,
    #  :output_dir => nil
    }
    @ops = OpenStruct.new
    #@options[:skeleton_dir] = ::Bones.path('data') unless test(?d, skeleton_dir)
  end

  def cli_run( args )
    raise NotImplementedError
  end
  
  def run( args )
    raise NotImplementedError
  end

# Print running output when used in command-line mode
#
  def cli_p(cli=true, str='')
    return false if !cli or @ops.quiet
    @out.puts str
  end

# Print an error from the command-line options
#
  def clierr_p(str)
    @out.puts
    @err.puts "Error: #{str}"
    @out.puts
    @out.puts opt_parser
  end

# Define the command-line option available
#
  def standard_options
    {
      :verbose => ['-v', '--verbose', 'enable verbose output',
          lambda {
            options[:verbose] = true
          }],
      :tracktime => ['-m', '--tracktime', 'track execution time',
          lambda {
            options[:tracktime] = true
          }],
      :quiet => ['-q', '--quiet', 'silence output',
          lambda {
            options[:quiet] = true
          }],
      :indir => ['-i', '--in DIR', String, 'input directory', "(default #{Dir.pwd})",
          lambda{ |value|
            options[:indir] = value
          }],
      :outdir => ['-o', '--out DIR', String, 'output directory', "(default #{Dir.pwd})",
          lambda{ |value|
            options[:outdir] = value
          }],
      :re5 => ['-5', '--re5 ENZYME', String, "5' restriction enzyme",
          lambda { |value|
            options[:re5] = value
          }],
      :re3 => ['-3', '--re3 ENZYME', String, "3' restriction enzyme",
          lambda { |value|
            options[:re3] = value
          }],
      :sqlite => ['-t', '--sqlite', 'use sqlite', '(default is CSV)',
          lambda {
            options[:sqlite] = true
          }],
      :filelookup => ['-l', '--lookup FILE', String, "name of the frequency lookup file generated by 'index'",
          lambda { |value|
            options[:filelookup] = value
          }],
      :filefasta => ['-f', '--fasta FILE', String, 'name of the Fasta sequences file',
          lambda { |value|
            options[:filefasta] = value
          }],
      :seqsize => ['-s', '--seqsize SIZE', Array, '',
          lambda { |value|
            options[:seqsize] = value
          }],
          
      :adapter5 => ['-y', '--adapter5 ADAPTER', String, '',
          lambda { |value|
            options[:adapter5] = value
          }],
      :adapter3 => ['-z', '--adapter3 ADAPTER', String, '',
          lambda { |value|
            options[:adapter3] = value
          }],
          
      :named_adapter5 => ['-b', '--named-adapter5 NAME', String, '',
          lambda { |value|
            options[:named_adapter5] = value
          }],
      :named_adapter3 => ['-c', '--named-adapter3 NAME', String, '',
          lambda { |value|
            options[:named_adapter3] = value
          }],
          
      :adapter5_size => ['-d', '--adapter5-size SIZE', Integer, '',
          lambda { |value|
            options[:adapter5_size] = value
          }],
      :adapter3_size => ['-e', '--adapter3-size SIZE', Integer, '',
          lambda { |value|
            options[:adapter3_size] = value
          }],
          
      :adapter5_sequence => ['-w', '--adapter5-sequence SEQUENCE', String, '',
          lambda { |value|
            options[:adapter5_sequence] = value
          }],
      :adapter3_sequence => ['-x', '--adapter3-sequence SEQUENCE', String, '',
          lambda { |value|
            options[:adapter3_sequence] = value
          }],
          
      :fileadapters => ['-a', '--adapters FILE', String, '',
          lambda { |value|
            options[:fileadapters] = value
          }]

    }
  end

end  # class Command
end  # class App
end  # module Genfrag

# EOF
